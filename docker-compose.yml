
services:
  elasticsearch:
    container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:8.15.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ulimits:
      memlock:
        soft: -1
        hard: -1
    networks:
      - mynetwork
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=30s || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    networks:
      - mynetwork

  loki:
    container_name: loki
    image: grafana/loki:2.9.2
    ports:
      - "3100:3100"
    volumes:
      - ./config/loki-config.yml:/etc/loki/local-config.yml
    command: -config.file=/etc/loki/local-config.yml
    networks:
      - mynetwork

  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-storage:/prometheus
    networks:
      - mynetwork

  tempo:
    container_name: tempo
    image: grafana/tempo:latest
    command: [ "-config.file=/etc/tempo.yml" ]
    volumes:
      - ./config/tempo-config.yml:/etc/tempo.yml
      - tempo-storage:/tmp/tempo
    ports:
      - "3200:3200"   # Tempo HTTP API for Grafana
      - "4317:4317"   # OTLP gRPC receiver (apps send here)
      - "4318:4318"   # OTLP HTTP receiver (apps send here)
    user: "0:0"  # Run as root to avoid permission issues
    networks:
      - mynetwork

  redis:
    container_name: redis
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - mynetwork
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

  postgres:
    container_name: postgres
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      - POSTGRES_DB=odoo
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_HOST_AUTH_METHOD=trust
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - mynetwork
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d odoo"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  odoofinal:
    container_name: odoofinal
    build:
      context: .
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    volumes:
      - .:/app
      - /app/node_modules
      - /app/.next
      - /app/scripts
    environment:
      - NODE_ENV=development
      - HOSTNAME=0.0.0.0
      - WATCHPACK_POLLING=true
      - DATABASE_URL=
      - REDIS_URL=redis://redis:6379
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - BETTER_AUTH_SECRET=
      - BETTER_AUTH_URL=https://localhost
      - NEXT_PUBLIC_APP_URL=http://localhost
      - SMTP_HOST=smtp.gmail.com
      - SMTP_PORT=587
      - SMTP_SECURE=false
      - SMTP_USER=
      - SMTP_PASS=
      - FROM_NAME
      - FROM_EMAIL=
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
      - REDIS_DB=1
      - OTEL_SERVICE_NAME=odoofinal
      - OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://tempo:4318/v1/traces
      - OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf
      - OTEL_EXPORTER_OTLP_TRACES_TIMEOUT=10000
      - OTEL_EXPORTER_OTLP_TRACES_COMPRESSION=gzip
      - OTEL_LOG_LEVEL=error
    networks:
      - mynetwork
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      loki:
        condition: service_started
      prometheus:
        condition: service_started
      tempo:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

networks:
  mynetwork:
    name: mynetwork
    driver: bridge

volumes:
  elasticsearch-data:
    driver: local
  grafana-storage:
    driver: local
  prometheus-storage:
    driver: local
  tempo-storage:
    driver: local
  postgres-data:
    driver: local